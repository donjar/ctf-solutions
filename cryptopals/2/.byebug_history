continue
str_len
continue
str_len
exec i
eval i
i
answer
continue
answer
continue
answer
continue
[1, 2, 3] == [1, 2, 3]
one_byte_short
continue
encrypt('a' * 7 + "\x03").chars.take(8)
encrypt('a' * 7 + "\x023").chars.take(8)
encrypt('a' * 7 + "\x02").chars.take(8)
encrypt('a' * 7 + "\x01").chars.take(8)
encrypt('a' * 7 + "\x01")
one_byte_short
continue
cipher.final
cipher.update(elem)
elem
continue
xor
iv
elem
continue
elem
continue
char_array
continue
x
x.pop
x
x[-2] = x[-2] + x[-1]
x = ['a', 'b', 'c']
x
x[-1] += x.pop
x = ['a', 'b', 'c']
x
x[-2] += x.pop
x = [1, 2, 3]
x
x.pop
x = [1,2, 3]
cipher.update char_array.join
    cipher.key = key
    cipher.decrypt
    cipher = OpenSSL::Cipher.new("AES-#{block_size}-ECB")
cipher.update char_array.join
char_array.join
char_array
cipher.update(elem)
cipher
elem
cipher
continue
(elem.to_i(2) ^ xor.to_i(2)).to_s(2)
elem.to_i(2) ^ xor.to_i(2)
xor.to_i(2)
elem.to_i(2)
xor
elem
xord
